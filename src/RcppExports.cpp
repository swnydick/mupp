// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// find_all_permutations
IntegerMatrix find_all_permutations(int n, int init);
RcppExport SEXP _mupp_find_all_permutations(SEXP nSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(find_all_permutations(n, init));
    return rcpp_result_gen;
END_RCPP
}
// find_permutation_order
IntegerVector find_permutation_order(int n, int index, int init);
RcppExport SEXP _mupp_find_permutation_order(SEXP nSEXP, SEXP indexSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(find_permutation_order(n, index, init));
    return rcpp_result_gen;
END_RCPP
}
// find_permutation_index
IntegerVector find_permutation_index(IntegerVector order);
RcppExport SEXP _mupp_find_permutation_index(SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(find_permutation_index(order));
    return rcpp_result_gen;
END_RCPP
}
// find_crossprod_column
int find_crossprod_column(int dim1, int dim2, int n_dims, int init);
RcppExport SEXP _mupp_find_crossprod_column(SEXP dim1SEXP, SEXP dim2SEXP, SEXP n_dimsSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< int >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< int >::type n_dims(n_dimsSEXP);
    Rcpp::traits::input_parameter< int >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(find_crossprod_column(dim1, dim2, n_dims, init));
    return rcpp_result_gen;
END_RCPP
}
// find_crossprod_dims
NumericVector find_crossprod_dims(int dim12, int n_dims, int init);
RcppExport SEXP _mupp_find_crossprod_dims(SEXP dim12SEXP, SEXP n_dimsSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dim12(dim12SEXP);
    Rcpp::traits::input_parameter< int >::type n_dims(n_dimsSEXP);
    Rcpp::traits::input_parameter< int >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(find_crossprod_dims(dim12, n_dims, init));
    return rcpp_result_gen;
END_RCPP
}
// p_mupp_rank_impl
NumericMatrix p_mupp_rank_impl(const NumericMatrix& thetas, const NumericMatrix& params, IntegerVector dims, IntegerVector picked_order_id);
RcppExport SEXP _mupp_p_mupp_rank_impl(SEXP thetasSEXP, SEXP paramsSEXP, SEXP dimsSEXP, SEXP picked_order_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type picked_order_id(picked_order_idSEXP);
    rcpp_result_gen = Rcpp::wrap(p_mupp_rank_impl(thetas, params, dims, picked_order_id));
    return rcpp_result_gen;
END_RCPP
}
// pder1_mupp_rank_impl
ListOf<NumericMatrix> pder1_mupp_rank_impl(const NumericMatrix& thetas, const NumericMatrix& params, IntegerVector dims, IntegerVector picked_order_id);
RcppExport SEXP _mupp_pder1_mupp_rank_impl(SEXP thetasSEXP, SEXP paramsSEXP, SEXP dimsSEXP, SEXP picked_order_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type picked_order_id(picked_order_idSEXP);
    rcpp_result_gen = Rcpp::wrap(pder1_mupp_rank_impl(thetas, params, dims, picked_order_id));
    return rcpp_result_gen;
END_RCPP
}
// pder2_mupp_rank_impl
ListOf<NumericMatrix> pder2_mupp_rank_impl(const NumericMatrix& thetas, const NumericMatrix& params, IntegerVector dims, IntegerVector picked_order_id);
RcppExport SEXP _mupp_pder2_mupp_rank_impl(SEXP thetasSEXP, SEXP paramsSEXP, SEXP dimsSEXP, SEXP picked_order_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type picked_order_id(picked_order_idSEXP);
    rcpp_result_gen = Rcpp::wrap(pder2_mupp_rank_impl(thetas, params, dims, picked_order_id));
    return rcpp_result_gen;
END_RCPP
}
// loglik_mupp_rank_impl
NumericMatrix loglik_mupp_rank_impl(const NumericMatrix& thetas, const NumericMatrix& params, const IntegerMatrix& items, const IntegerMatrix& picked_orders);
RcppExport SEXP _mupp_loglik_mupp_rank_impl(SEXP thetasSEXP, SEXP paramsSEXP, SEXP itemsSEXP, SEXP picked_ordersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type items(itemsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type picked_orders(picked_ordersSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_mupp_rank_impl(thetas, params, items, picked_orders));
    return rcpp_result_gen;
END_RCPP
}
// lder1_mupp_rank_impl
NumericMatrix lder1_mupp_rank_impl(const NumericMatrix& thetas, const NumericMatrix& params, const IntegerMatrix& items, const IntegerMatrix& picked_orders);
RcppExport SEXP _mupp_lder1_mupp_rank_impl(SEXP thetasSEXP, SEXP paramsSEXP, SEXP itemsSEXP, SEXP picked_ordersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type items(itemsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type picked_orders(picked_ordersSEXP);
    rcpp_result_gen = Rcpp::wrap(lder1_mupp_rank_impl(thetas, params, items, picked_orders));
    return rcpp_result_gen;
END_RCPP
}
// lder2_mupp_rank_impl
NumericMatrix lder2_mupp_rank_impl(const NumericMatrix& thetas, const NumericMatrix& params, const IntegerMatrix& items, const IntegerMatrix& picked_orders);
RcppExport SEXP _mupp_lder2_mupp_rank_impl(SEXP thetasSEXP, SEXP paramsSEXP, SEXP itemsSEXP, SEXP picked_ordersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type items(itemsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type picked_orders(picked_ordersSEXP);
    rcpp_result_gen = Rcpp::wrap(lder2_mupp_rank_impl(thetas, params, items, picked_orders));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mupp_find_all_permutations", (DL_FUNC) &_mupp_find_all_permutations, 2},
    {"_mupp_find_permutation_order", (DL_FUNC) &_mupp_find_permutation_order, 3},
    {"_mupp_find_permutation_index", (DL_FUNC) &_mupp_find_permutation_index, 1},
    {"_mupp_find_crossprod_column", (DL_FUNC) &_mupp_find_crossprod_column, 4},
    {"_mupp_find_crossprod_dims", (DL_FUNC) &_mupp_find_crossprod_dims, 3},
    {"_mupp_p_mupp_rank_impl", (DL_FUNC) &_mupp_p_mupp_rank_impl, 4},
    {"_mupp_pder1_mupp_rank_impl", (DL_FUNC) &_mupp_pder1_mupp_rank_impl, 4},
    {"_mupp_pder2_mupp_rank_impl", (DL_FUNC) &_mupp_pder2_mupp_rank_impl, 4},
    {"_mupp_loglik_mupp_rank_impl", (DL_FUNC) &_mupp_loglik_mupp_rank_impl, 4},
    {"_mupp_lder1_mupp_rank_impl", (DL_FUNC) &_mupp_lder1_mupp_rank_impl, 4},
    {"_mupp_lder2_mupp_rank_impl", (DL_FUNC) &_mupp_lder2_mupp_rank_impl, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mupp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
